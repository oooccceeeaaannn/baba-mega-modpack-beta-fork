---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 16021.
--- DateTime: 2024/2/1 18:59
---
function isunitidlost(unitid)
    if unitid == nil then return false end
    local unit = mmf.newObject(MF_getfixed(unitid))
    if unit == nil then return false end
    return unit.islost or false
end

function topersistid(unitid)
    if unitid == nil then
        return nil
    end
    local unit = mmf.newObject(unitid)
    if unit == nil then
        return nil
    end
    return unit.values[ID]
end

function unitidnotlostornil(unitid)
    if unitid == nil then
        return false
    end
    return not (isunitidlost(unitid))
end

function deletefromlost(unitid)
    local unit = mmf.newObject(MF_getfixed(unitid))
    unit.islost = false
end

function addtolost(unitid)
    local unit = mmf.newObject(MF_getfixed(unitid))
    unit.islost = true
end

function removealllostfromtable(idtable)
    local result = {}
    for k,v in ipairs(idtable) do
        if not (isunitidlost(topersistid(v))) then
            table.insert(result,v)
        end
    end
    return result
end

function lenwithoutlostobj(idtable)
    if idtable == nil then
        return 0
    end
    local result = #idtable
    for k,v in ipairs(idtable) do
        if (isunitidlost(topersistid(v))) then
            result = result - 1
        end
    end
    return result
end

function condshascond(conds,cond)
    local result = false
    if conds[1] == nil or conds == nil then
        return false
    end
    for k, v in pairs(conds) do
        if (v[1] == cond) then
            result = true
        end
    end
    return result
end

function condshasmissing(conds)
    local result = false
    if conds[1] == nil or conds == nil then
        return false
    end
    for k, v in pairs(conds) do
        if (v[1] == "missing") then
            result = true
        end
    end
    return result
end

function isadjective(word)
    if (word == "push") or (word == "select") or (word == "stop") or (word == "meta") or (word == "unmeta") or (word == "word") then
        return true
    end
    if (word == "error") or (word == "all") or (word == "createall") or (word == "text") or (word == "level") or (word == "empty") then
        return false
    end
    if string.sub(word,1,4) == "not " then
        return false
    end
    local altname = objectpalette["text_"..word]
    return (getactualdata_objlist(altname, "type") == 2)
end

function gr_geteffectsonunitid(unitid, x, y)
    local result = {}
    local uname = "empty"
    if unitid ~= 2 then
        local unit = mmf.newObject(unitid)
        uname = unit.strings[UNITNAME]
        x, y = nil, nil
    end
    for _,v in ipairs(featureindex[uname]) do
        local brule = v[1]
        local conds = v[2]
        local effect = brule[3]
        if (brule[1] == uname) and (brule[2] == "is") and isadjective(effect) and (effect ~= "greedy") then
            if testcond(conds, unitid, x, y) then
                table.insert(result, effect)
            end
        end
    end
    return result
end

function gr_stringistext(str)
    if (string.sub(str,1,5) == "text_") then
        return true
    end
    return false
end

function gr_checkcondss(condss,unitid)
    for _,v in ipairs(condss) do
        if testcond(v, unitid) then
            return true
        end
    end
    return false
end

function gr_is_string_special(str)
    if str == "text" then
        return true
    elseif (string.sub(str,1,4) == 'meta') and (str ~= "meta")
            and (tonumber(string.sub(str,5)) ~= nil) then
        return true
    end
    return false
end

function gr_get_special_greedy_conds()
    local greedy_rules = featureindex['greedy']
    local result = {}
    local result2 = {}
    local result3 = false
    if (greedy_rules == nil) or (#greedy_rules == 0) then
        return {},{},false
    end
    for _,v in ipairs(greedy_rules) do
        local target = v[1][1]
        local verb = v[1][2]
        if gr_is_string_special(target) and (verb == 'is') then
            if (result[target] == nil) then
                result[target] = {}
            end
            table.insert(result[target], v[2])
            result2[target] = true
            result3 = true
        end
    end
    return result,result2,result3

end

function gr_is_string_special_included_or_equal(str, spec_str)
    if str == spec_str then
        return true
    end
    if not gr_is_string_special(spec_str) then
        return false
    end
    if (spec_str == "text") and (gr_stringistext(str)
            or ((string.sub(str,1,4) == 'meta') and (str ~= "meta"))) then
        return true
    elseif (string.sub(spec_str,1,4) == 'meta') and (spec_str ~= "meta") then
        local speclvl = tonumber(string.sub(spec_str,5))
        if getmetalevel(str) == speclvl then return true end
    end
    return false
end

function gr_get_possibly_included_special_nouns(str)
    local mlvl = getmetalevel(str)
    if mlvl == -1 then
        return {"meta-1"}
    end
    return {"meta"..tostring(mlvl),"text"}
end
